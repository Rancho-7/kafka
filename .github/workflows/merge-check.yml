name: Client and Streams Tests

on:
  push:
    branches:
      - CI-TEST2

jobs:
  test-modules:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        java: [ 11 ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          cache-read-only: false
          gradle-version: wrapper

      - name: Run Tests
        id: run-tests
        continue-on-error: false
        run: |
          # 记录开始时间
          start_time=$(date +%s)
          
          ./gradlew :clients:test :streams:test \
            --no-daemon \
            --build-cache \
            --continue \
            -PtestLoggingEvents=started,passed,skipped,failed \
            -PmaxParallelForks=2 \
            -PmaxTestRetries=1 \
            -PmaxTestRetryFailures=3
          
          # 计算持续时间并格式化
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          
          hours=$((duration / 3600))
          minutes=$(( (duration % 3600) / 60 ))
          seconds=$((duration % 60))
          
          if [ $hours -gt 0 ]; then
            duration_str="${hours}h${minutes}m${seconds}s"
          else
            duration_str="${minutes}m${seconds}s"
          fi
          
          echo "TOTAL_DURATION=$duration_str" >> $GITHUB_ENV
          
          if [ $? -ne 0 ]; then
            echo "Tests failed"
            exit 1
          fi

      - name: Generate Test Summary
        if: always()
        run: |
            {
              if find . -path "*/build/test-results/test" -type d | grep -q .; then
                
                TOTAL_QUARANTINED=$(find . -type f \( -name "*.java" -o -name "TEST-*.xml" \) -exec grep -l "@Quarantined\|org.apache.kafka.test.Quarantined" {} \; | wc -l)
                
                # Basic test counts
                TOTAL_TESTS=$(find . -path "*/build/test-results/test/TEST-*.xml" -type f -exec grep -c "<testcase" {} \; | awk '{sum += $1} END {print sum}')
                TOTAL_FAILED=$(find . -path "*/build/test-results/test/TEST-*.xml" -type f -exec grep -c "<failure" {} \; | awk '{sum += $1} END {print sum}')
                TOTAL_SKIPPED=$(find . -path "*/build/test-results/test/TEST-*.xml" -type f -exec grep -c "<skipped" {} \; | awk '{sum += $1} END {print sum}')
                TOTAL_ERRORS=$(find . -path "*/build/test-results/test/TEST-*.xml" -type f -exec grep -c "<error" {} \; | awk '{sum += $1} END {print sum}')
            
                # Calculate passed tests
                TOTAL_PASSED=$((TOTAL_TESTS - TOTAL_FAILED - TOTAL_SKIPPED))
            
                echo "${TOTAL_TESTS} tests cases run in ${{ env.TOTAL_DURATION }}."
                echo
                echo "${TOTAL_PASSED} PASSED ✅, ${TOTAL_FAILED} FAILED ❌, 0 FLAKY ⚠️, ${TOTAL_SKIPPED} SKIPPED 🙈, ${TOTAL_QUARANTINED} QUARANTINED 😷, and ${TOTAL_ERRORS} errors."
                if [ ${TOTAL_FAILED} -gt 0 ]; then
                  echo "::error::${TOTAL_FAILED} tests failed"
                  exit 1
                fi
              else
                echo "No test results found."
              fi
            } >> $GITHUB_STEP_SUMMARY

      - name: List Quarantined Tests
        if: always()
        run: |
          echo "Quarantined Tests:" >> $GITHUB_STEP_SUMMARY
          {
            echo "Searching in Java files:"
            find . -name "*.java" -type f -exec grep -l "@Quarantined" {} \;
            echo "Searching in test results:"
            find . -path "*/build/test-results/test/TEST-*.xml" -type f -exec grep -l "org.apache.kafka.test.Quarantined" {} \;
          } >> $GITHUB_STEP_SUMMARY || true

      - name: Report Failed Tests
        if: always()
        run: |
            echo "Failed Tests:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Store the failed test files in an array
            mapfile -t failed_files < <(find . -path "*/build/test-results/test/TEST-*.xml" -type f -exec grep -l "<failure" {} \;)
            
            if [ ${#failed_files[@]} -eq 0 ]; then
              echo "No failed tests found." >> $GITHUB_STEP_SUMMARY
            else
              for file in "${failed_files[@]}"; do
                # Extract test class and method names
                while IFS= read -r testcase; do
                  if echo "$testcase" | grep -q "<failure"; then
                    classname=$(echo "$testcase" | sed -n 's/.*classname="\([^"]*\)".*/\1/p')
                    testname=$(echo "$testcase" | sed -n 's/.*name="\([^"]*\)".*/\1/p')
                    message=$(echo "$testcase" | sed -n 's/.*message="\([^"]*\)".*/\1/p')
            
                    echo "❌ Class: $classname" >> $GITHUB_STEP_SUMMARY
                    echo "   Test: $testname" >> $GITHUB_STEP_SUMMARY
                    if [ ! -z "$message" ]; then
                      echo "   Error: $message" >> $GITHUB_STEP_SUMMARY
                    fi
                    echo "" >> $GITHUB_STEP_SUMMARY
                  fi
                done < <(grep -A1 "<testcase" "$file" | grep -B1 "<failure")
              done
            fi
            
            # Also output to console for immediate feedback
            cat $GITHUB_STEP_SUMMARY

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'
          detailed_summary: true
          include_passed: true
          check_name: 'Test Results'
          fail_on_failure: true
          require_tests: true
          job_summary: true
          annotations: true
          # Add test timing information
          test_formats: duration

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-java${{ matrix.java }}
          path: |
            **/build/reports/tests/
            **/build/test-results/
          compression-level: 9
          if-no-files-found: ignore