name: Client and Streams Tests

on:
  push:
    branches:
      - CI-TEST2

jobs:
  test-modules:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        java: [ 11 ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          cache-read-only: false
          gradle-version: wrapper

      - name: Run Tests
        id: run-tests
        continue-on-error: false
        run: |
          # ËÆ∞ÂΩïÂºÄÂßãÊó∂Èó¥
          start_time=$(date +%s)
          
          ./gradlew :clients:test :streams:test \
            --no-daemon \
            --build-cache \
            --continue \
            -PtestLoggingEvents=started,passed,skipped,failed \
            -PmaxParallelForks=2 \
            -PmaxTestRetries=1 \
            -PmaxTestRetryFailures=3
          
          # ËÆ°ÁÆóÊåÅÁª≠Êó∂Èó¥Âπ∂Ê†ºÂºèÂåñ
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          
          hours=$((duration / 3600))
          minutes=$(( (duration % 3600) / 60 ))
          seconds=$((duration % 60))
          
          if [ $hours -gt 0 ]; then
            duration_str="${hours}h${minutes}m${seconds}s"
          else
            duration_str="${minutes}m${seconds}s"
          fi
          
          echo "TOTAL_DURATION=$duration_str" >> $GITHUB_ENV
          
          if [ $? -ne 0 ]; then
            echo "Tests failed"
            exit 1
          fi
      - name: Generate Test Summary
        if: always()
        run: |
          {
            if find . -path "*/build/test-results/test" -type d | grep -q .; then
          
              TOTAL_QUARANTINED=$(find . -type f \( -name "*.java" -o -name "TEST-*.xml" \) -exec grep -l "@Quarantined\|org.apache.kafka.test.Quarantined" {} \; | wc -l)
          
              # Basic test counts
              TOTAL_TESTS=$(find . -path "*/build/test-results/test/TEST-*.xml" -type f -exec grep -c "<testcase" {} \; | awk '{sum += $1} END {print sum}')
              TOTAL_FAILED=$(find . -path "*/build/test-results/test/TEST-*.xml" -type f -exec grep -c "<failure" {} \; | awk '{sum += $1} END {print sum}')
              TOTAL_SKIPPED=$(find . -path "*/build/test-results/test/TEST-*.xml" -type f -exec grep -c "<skipped" {} \; | awk '{sum += $1} END {print sum}')
              TOTAL_ERRORS=$(find . -path "*/build/test-results/test/TEST-*.xml" -type f -exec grep -c "<error" {} \; | awk '{sum += $1} END {print sum}')
          
              # Calculate passed tests
              TOTAL_PASSED=$((TOTAL_TESTS - TOTAL_FAILED - TOTAL_SKIPPED))
          
              # Export variables to GITHUB_ENV to share between steps
              echo "TOTAL_TESTS=${TOTAL_TESTS}" >> $GITHUB_ENV
              echo "TOTAL_PASSED=${TOTAL_PASSED}" >> $GITHUB_ENV
              echo "TOTAL_FAILED=${TOTAL_FAILED}" >> $GITHUB_ENV
              echo "TOTAL_SKIPPED=${TOTAL_SKIPPED}" >> $GITHUB_ENV
              echo "TOTAL_QUARANTINED=${TOTAL_QUARANTINED}" >> $GITHUB_ENV
              echo "TOTAL_ERRORS=${TOTAL_ERRORS}" >> $GITHUB_ENV
          
            else
              echo "No test results found."
            fi
          } >> $GITHUB_STEP_SUMMARY

      - name: Report Failed Tests
        if: always()
        run: |
          {
            echo "# Test Summary"
            echo
            echo "## Test Results"
            echo
            # Use variables from GITHUB_ENV
            echo "${{ env.TOTAL_TESTS }} tests cases run in ${{ env.TOTAL_DURATION }}."
            echo
            echo "${{ env.TOTAL_PASSED }} PASSED ‚úÖ, ${{ env.TOTAL_FAILED }} FAILED ‚ùå, 0 FLAKY ‚ö†Ô∏è, ${{ env.TOTAL_SKIPPED }} SKIPPED üôà, ${{ env.TOTAL_QUARANTINED }} QUARANTINED üò∑, and ${{ env.TOTAL_ERRORS }} errors."
            echo
          
            # Start Failed Tests Section if there are failures
            if [ "${{ env.TOTAL_FAILED }}" -gt 0 ]; then
              echo "<details open=\"true\">"
              echo "<summary>Failed Tests FAILED ‚ùå (${TOTAL_FAILED})</summary>"
              echo
              echo "| Module | Test | Message | Time |"
              echo "| ------ | ---- | ------- | ---- |"
              
              find . -path "*/build/test-results/test/TEST-*.xml" -type f | while read -r file; do
                current_testcase=""
                current_name=""
                current_classname=""
                current_time=""
                in_failed_testcase=false
                
                while IFS= read -r line; do
                if [[ $line == *"<testcase"* ]]; then
                  # ÈáçÁΩÆÁä∂ÊÄÅÔºåÂºÄÂßãÊñ∞ÁöÑÊµãËØïÁî®‰æã
                  current_name=$(echo "$line" | sed -n 's/.*name="\([^"]*\)".*/\1/p')
                  current_classname=$(echo "$line" | sed -n 's/.*classname="\([^"]*\)".*/\1/p')
                  current_time=$(echo "$line" | sed -n 's/.*time="\([^"]*\)".*/\1/p')
                  in_failed_testcase=false
                elif [[ $line == *"<failure"* ]] && [[ -n "$current_name" ]]; then
                  # ÊâæÂà∞Â§±Ë¥•Ê†áËÆ∞ÔºåÊèêÂèñ‰ø°ÊÅØÂπ∂ËæìÂá∫
                  in_failed_testcase=true
                  message=$(echo "$line" | sed -n 's/.*message="\([^"]*\)".*/\1/p')
                  module=$(echo "$current_classname" | rev | cut -d. -f1 | rev)
                  testname=$(echo "$current_name" | sed 's/()$//')
                  message=$(echo "$message" | sed 's/|/\\|/g')
                  echo "| ${module} | ${testname} | ${message} | ${current_time}s |"
                  elif [[ $line == *"</testcase>"* ]]; then
                  # ÈáçÁΩÆÁä∂ÊÄÅÔºåÁªìÊùüÂΩìÂâçÊµãËØïÁî®‰æã
                  current_name=""
                  current_classname=""
                  current_time=""
                  in_failed_testcase=false
                fi
                done < "$file"
              done
            
            echo "</details>"
            fi
          
            # Start Quarantined Tests Section
            if [ "${{ env.TOTAL_QUARANTINED }}" -gt 0 ]; then
              echo "<details>"
              echo "<summary>Quarantined Tests üò∑ (${{ env.TOTAL_QUARANTINED }})</summary>"
              echo
              echo "| Module | Test |"
              echo "| ------ | ---- |"
              while IFS= read -r file; do
                classname=$(basename "$file" .java)
                echo "| ${classname} | @Quarantined |"
              done < <(find . -name "*.java" -type f -exec grep -l "@Quarantined" {} \;)
              echo "</details>"
          fi
          
          } >> $GITHUB_STEP_SUMMARY
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'
          detailed_summary: true
          include_passed: true
          check_name: 'Test Results'
          fail_on_failure: true
          require_tests: true
          job_summary: true
          annotations: true
          summary: true
          test_formats: duration  # Show test durations
          exclude_sources: false  # Include source file info

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-java${{ matrix.java }}
          path: |
            **/build/reports/tests/
            **/build/test-results/
          compression-level: 9
          if-no-files-found: ignore